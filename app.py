import streamlit as st
import plotly.express as px
import uuid
import hashlib
import sqlite3
import os
from datetime import datetime
import json
import base64
import pandas as pd
import io
import random
import time

# =============================================
# –ù–ê–°–¢–†–û–ô–ö–ê STREAMLIT –ò –°–¢–ò–õ–ò
# =============================================

st.set_page_config(
    page_title="–ö–∞–Ω–¥–∏–î–ê",
    page_icon="üíº", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        color: #FF6B35;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 800;
    }
    
    .sub-header {
        font-size: 1.8rem;
        color: #2C3E50;
        margin-bottom: 1.5rem;
        font-weight: 700;
        border-left: 5px solid #FF6B35;
        padding-left: 15px;
    }
    
    .stButton button {
        background: linear-gradient(135deg, #FF6B35, #FF8C42);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 107, 53, 0.4);
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        border: none;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        margin-bottom: 1rem;
        border-left: 5px solid #FF6B35;
    }
    
    .interview-question {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        font-size: 1.2rem;
        font-weight: 600;
    }
    
    .success-card {
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
    }
    
    .warning-card {
        background: linear-gradient(135deg, #f7971e 0%, #ffd200 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
    }
    
    .error-card {
        background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
    }
    
    .info-card {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
    }
    
    .nav-button-active {
        background: linear-gradient(135deg, #FF6B35, #FF8C42) !important;
        color: white !important;
        border: 2px solid #FF6B35 !important;
    }
    
    .nav-button-inactive {
        background: white !important;
        color: #FF6B35 !important;
        border: 2px solid #FF6B35 !important;
    }
    
    .candidate-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        border: 2px solid #f0f0f0;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }
    
    .candidate-card:hover {
        border-color: #FF6B35;
        box-shadow: 0 5px 15px rgba(255, 107, 53, 0.1);
    }
    
    .favorite-star {
        color: #FFD700;
        font-size: 1.5rem;
    }
</style>
""", unsafe_allow_html=True)

# =============================================
# –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
# =============================================

class AuthSystem:
    def __init__(self):
        self.db_path = "data/users.db"
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs('data', exist_ok=True)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                username TEXT UNIQUE NOT NULL,
                hashed_password TEXT NOT NULL,
                full_name TEXT NOT NULL,
                user_type TEXT NOT NULL,
                company TEXT,
                position TEXT,
                phone TEXT,
                location TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—é–º–µ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS resumes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                filename TEXT,
                file_content BLOB,
                file_type TEXT,
                file_size INTEGER,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                original_text TEXT,
                detected_position TEXT,
                experience_level TEXT,
                skills TEXT,
                is_analyzed BOOLEAN DEFAULT 0,
                analysis_date TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–æ–≤ —Ä–µ–∑—é–º–µ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS resume_analyses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                resume_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                authenticity_score REAL,
                detected_position TEXT,
                flags TEXT,
                recommendations TEXT,
                verdict TEXT,
                analysis_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS favorites (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                hr_user_id INTEGER NOT NULL,
                candidate_user_id INTEGER NOT NULL,
                resume_id INTEGER NOT NULL,
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (hr_user_id) REFERENCES users (id),
                FOREIGN KEY (candidate_user_id) REFERENCES users (id),
                FOREIGN KEY (resume_id) REFERENCES resumes (id),
                UNIQUE(hr_user_id, candidate_user_id)
            )
        ''')
        
        # –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS interviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                interview_type TEXT NOT NULL,
                position TEXT NOT NULL,
                questions TEXT,
                answers TEXT,
                feedback TEXT,
                score REAL,
                duration INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("SELECT COUNT(*) FROM users")
        if cursor.fetchone()[0] == 0:
            self._create_test_users(cursor)
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    def _create_test_users(self, cursor):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        test_users = [
            {
                'email': 'hr@company.com',
                'username': 'hr_manager', 
                'password': 'hr123',
                'full_name': 'HR –ú–µ–Ω–µ–¥–∂–µ—Ä',
                'user_type': 'hr',
                'company': '–¢–µ—Ö–Ω–æ–ö–æ—Ä–ø',
                'position': 'HR Manager',
                'phone': '',
                'location': ''
            },
            {
                'email': 'candidate@example.com',
                'username': 'candidate',
                'password': 'candidate123', 
                'full_name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                'user_type': 'candidate',
                'company': '',
                'position': '',
                'phone': '+79991234567',
                'location': '–ú–æ—Å–∫–≤–∞'
            },
            {
                'email': 'admin@example.com',
                'username': 'admin',
                'password': 'admin123',
                'full_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'user_type': 'hr',
                'company': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è',
                'position': 'Admin',
                'phone': '',
                'location': ''
            }
        ]
        
        for user_data in test_users:
            hashed_password = self._hash_password(user_data['password'])
            try:
                cursor.execute('''
                    INSERT INTO users 
                    (email, username, hashed_password, full_name, user_type, company, position, phone, location)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data['email'],
                    user_data['username'],
                    hashed_password,
                    user_data['full_name'],
                    user_data['user_type'],
                    user_data['company'],
                    user_data['position'],
                    user_data['phone'],
                    user_data['location']
                ))
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}")
            except sqlite3.IntegrityError as e:
                print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}: {e}")
    
    def _hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    def verify_password(self, plain_password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        return self._hash_password(plain_password) == hashed_password
    
    def authenticate_user(self, username: str, password: str):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM users WHERE username = ? AND is_active = 1
        ''', (username,))
        
        user_data = cursor.fetchone()
        conn.close()
        
        if user_data and self.verify_password(password, user_data[3]):  # hashed_password
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            self._update_last_login(user_data[0])
            
            return {
                'id': user_data[0],
                'email': user_data[1],
                'username': user_data[2],
                'full_name': user_data[4],
                'user_type': user_data[5],
                'company': user_data[6],
                'position': user_data[7],
                'phone': user_data[8],
                'location': user_data[9]
            }
        
        return None
    
    def _update_last_login(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET last_login = ? WHERE id = ?
        ''', (datetime.now().isoformat(), user_id))
        conn.commit()
        conn.close()
    
    def create_user(self, user_data: dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT id FROM users WHERE email = ? OR username = ?', 
                         (user_data['email'], user_data['username']))
            if cursor.fetchone():
                return False
            
            hashed_password = self._hash_password(user_data['password'])
            
            cursor.execute('''
                INSERT INTO users 
                (email, username, hashed_password, full_name, user_type, company, position, phone, location)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data['email'],
                user_data['username'],
                hashed_password,
                user_data['full_name'],
                user_data['user_type'],
                user_data.get('company', ''),
                user_data.get('position', ''),
                user_data.get('phone', ''),
                user_data.get('location', '')
            ))
            
            conn.commit()
            conn.close()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}")
            return True
            
        except Exception as e:
            print(f"Error creating user: {e}")
            return False
    
    def update_user_profile(self, user_id: int, update_data: dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE users SET 
                email = ?, username = ?, full_name = ?, company = ?, position = ?, phone = ?, location = ?
                WHERE id = ?
            ''', (
                update_data['email'],
                update_data['username'],
                update_data['full_name'],
                update_data.get('company', ''),
                update_data.get('position', ''),
                update_data.get('phone', ''),
                update_data.get('location', ''),
                user_id
            ))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"Error updating user: {e}")
            return False
    
    def change_password(self, user_id: int, current_password: str, new_password: str) -> bool:
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        cursor.execute('SELECT hashed_password FROM users WHERE id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result or not self.verify_password(current_password, result[0]):
            conn.close()
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        new_hashed_password = self._hash_password(new_password)
        cursor.execute('UPDATE users SET hashed_password = ? WHERE id = ?', 
                     (new_hashed_password, user_id))
        
        conn.commit()
        conn.close()
        return True

    def get_database_tables(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            conn.close()
            return [table[0] for table in tables]
        except Exception as e:
            print(f"Error getting tables: {e}")
            return []

    def get_table_data(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            query = f"SELECT * FROM {table_name}"
            df = pd.read_sql_query(query, conn)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
            cursor = conn.cursor()
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns_info = cursor.fetchall()
            
            conn.close()
            return df, columns_info
        except Exception as e:
            print(f"Error getting table data: {e}")
            return None, None

    def get_table_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            tables = self.get_database_tables()
            stats = {}
            
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                stats[table] = count
            
            conn.close()
            return stats
        except Exception as e:
            print(f"Error getting table statistics: {e}")
            return {}

    def execute_custom_query(self, query):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å SELECT
            if query.strip().upper().startswith('SELECT'):
                df = pd.read_sql_query(query, conn)
                conn.close()
                return df, None
            else:
                # –î–ª—è –Ω–µ-SELECT –∑–∞–ø—Ä–æ—Å–æ–≤
                cursor = conn.cursor()
                cursor.execute(query)
                conn.commit()
                affected_rows = cursor.rowcount
                conn.close()
                return None, f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {affected_rows}"
                
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

    def save_interview_result(self, user_id, interview_type, position, questions, answers, feedback, score, duration):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO interviews 
                (user_id, interview_type, position, questions, answers, feedback, score, duration)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id,
                interview_type,
                position,
                json.dumps(questions),
                json.dumps(answers),
                feedback,
                score,
                duration
            ))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"Error saving interview: {e}")
            return False

    def get_user_interviews(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM interviews 
                WHERE user_id = ? 
                ORDER BY created_at DESC
            ''', (user_id,))
            
            interviews = cursor.fetchall()
            conn.close()
            return interviews
        except Exception as e:
            print(f"Error getting interviews: {e}")
            return []

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_system = AuthSystem()

# =============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ù–î–ò–î–ê–¢–ê–ú–ò
# =============================================

def get_all_candidates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è HR"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT 
                r.id as resume_id,
                r.filename,
                r.detected_position,
                r.experience_level,
                r.upload_date,
                r.is_analyzed,
                u.id as user_id,
                u.full_name,
                u.email,
                u.phone,
                u.location,
                ra.authenticity_score,
                ra.verdict,
                ra.created_at as analysis_date
            FROM resumes r
            JOIN users u ON r.user_id = u.id
            LEFT JOIN resume_analyses ra ON r.id = ra.resume_id
            WHERE u.user_type = 'candidate'
            ORDER BY r.upload_date DESC
        ''')
        
        candidates = cursor.fetchall()
        conn.close()
        return candidates
        
    except Exception as e:
        print(f"Error getting candidates: {e}")
        return []

def add_to_favorites(hr_user_id, candidate_user_id, resume_id, notes=""):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO favorites 
            (hr_user_id, candidate_user_id, resume_id, notes)
            VALUES (?, ?, ?, ?)
        ''', (hr_user_id, candidate_user_id, resume_id, notes))
        
        conn.commit()
        conn.close()
        return True
        
    except Exception as e:
        print(f"Error adding to favorites: {e}")
        return False

def remove_from_favorites(hr_user_id, candidate_user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            DELETE FROM favorites 
            WHERE hr_user_id = ? AND candidate_user_id = ?
        ''', (hr_user_id, candidate_user_id))
        
        conn.commit()
        conn.close()
        return True
        
    except Exception as e:
        print(f"Error removing from favorites: {e}")
        return False

def is_in_favorites(hr_user_id, candidate_user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id FROM favorites 
            WHERE hr_user_id = ? AND candidate_user_id = ?
        ''', (hr_user_id, candidate_user_id))
        
        result = cursor.fetchone()
        conn.close()
        return result is not None
        
    except Exception as e:
        print(f"Error checking favorites: {e}")
        return False

def get_favorites(hr_user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT 
                f.*,
                u.full_name,
                u.email,
                u.phone,
                u.location,
                r.detected_position,
                r.experience_level,
                r.upload_date,
                ra.authenticity_score,
                ra.verdict
            FROM favorites f
            JOIN users u ON f.candidate_user_id = u.id
            JOIN resumes r ON f.resume_id = r.id
            LEFT JOIN resume_analyses ra ON r.id = ra.resume_id
            WHERE f.hr_user_id = ?
            ORDER BY f.created_at DESC
        ''', (hr_user_id,))
        
        favorites = cursor.fetchall()
        conn.close()
        return favorites
        
    except Exception as e:
        print(f"Error getting favorites: {e}")
        return []

def get_resume_file(resume_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT filename, file_content, file_type FROM resumes WHERE id = ?
        ''', (resume_id,))
        
        resume = cursor.fetchone()
        conn.close()
        return resume
        
    except Exception as e:
        print(f"Error getting resume file: {e}")
        return None

def create_download_link(file_content, filename, file_type):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    try:
        if file_content:
            b64 = base64.b64encode(file_content).decode()
            href = f'<a href="data:{file_type};base64,{b64}" download="{filename}" style="background: linear-gradient(135deg, #FF6B35, #FF8C42); color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px;">üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ</a>'
            return href
        return None
    except Exception as e:
        print(f"Error creating download link: {e}")
        return None

# =============================================
# AI –ê–°–°–ò–°–¢–ï–ù–¢ –î–õ–Ø –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô
# =============================================

class InterviewAssistant:
    def __init__(self):
        self.positions = {
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": {
                "technical": ["–û–û–ü –ø—Ä–∏–Ω—Ü–∏–ø—ã", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                "questions": [
                    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å Python",
                    "–ö–∞–∫ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?",
                    "–ü—Ä–∏–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏",
                    "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –∫–æ–¥-—Ä–µ–≤—å—é"
                ]
            },
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": {
                "technical": ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "–ë—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å"],
                "questions": [
                    "–ö–∞–∫ –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–µ?",
                    "–ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–¥ –≤–∞—à–∏–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º",
                    "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ä–æ–∫–æ–≤",
                    "–ö–∞–∫ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É?"
                ]
            },
            "–ê–Ω–∞–ª–∏—Ç–∏–∫": {
                "technical": ["SQL", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
                "questions": [
                    "–ö–∞–∫ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?",
                    "–ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
                    "–í–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
                    "–ö–∞–∫ –≤—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö?"
                ]
            },
            "–î–∏–∑–∞–π–Ω–µ—Ä": {
                "technical": ["UI/UX", "–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞"],
                "questions": [
                    "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞",
                    "–ö–∞–∫ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è?",
                    "–ü—Ä–∏–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –¥–∏–∑–∞–π–Ω-–∑–∞–¥–∞—á–∏",
                    "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é UI kit"
                ]
            }
        }
    
    def generate_questions(self, position, experience_level, question_count=5):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        if position not in self.positions:
            position = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        base_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ",
            "–ü–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞?",
            "–ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å?",
            "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
            "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —Å–∂–∞—Ç—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏?",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Å–∞–º–æ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏",
            "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?",
            "–ö–∞–∫ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è?",
            "–ì–¥–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?"
        ]
        
        position_specific = self.positions[position]["questions"]
        technical_areas = self.positions[position]["technical"]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        selected_questions = random.sample(base_questions, min(3, len(base_questions)))
        selected_questions.extend(random.sample(position_specific, min(2, len(position_specific))))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        tech_questions = []
        for area in random.sample(technical_areas, min(2, len(technical_areas))):
            if experience_level == "Junior":
                tech_questions.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ {area}")
            elif experience_level == "Middle":
                tech_questions.append(f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {area} –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö")
            else:  # Senior
                tech_questions.append(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ {area}")
        
        selected_questions.extend(tech_questions)
        
        return selected_questions[:question_count]
    
    def evaluate_answer(self, question, answer, position):
        """–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è AI –æ—Ü–µ–Ω–∫–∏
        evaluation_criteria = {
            "–ø–æ–ª–Ω–æ—Ç–∞": random.randint(3, 10),
            "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å": random.randint(3, 10),
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å": random.randint(3, 10),
            "–ø—Ä–∏–º–µ—Ä—ã": random.randint(3, 10)
        }
        
        total_score = sum(evaluation_criteria.values()) / len(evaluation_criteria)
        
        feedback = []
        if evaluation_criteria["–ø–æ–ª–Ω–æ—Ç–∞"] >= 8:
            feedback.append("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π")
        else:
            feedback.append("üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π")
        
        if evaluation_criteria["–ø—Ä–∏–º–µ—Ä—ã"] >= 8:
            feedback.append("‚úÖ –•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏")
        else:
            feedback.append("üí° –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
        
        if len(answer.split()) < 20:
            feedback.append("üí° –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–π, —Ä–∞—Å–∫—Ä–æ–π—Ç–µ —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
        
        return {
            "score": round(total_score, 1),
            "criteria": evaluation_criteria,
            "feedback": feedback
        }
    
    def generate_final_feedback(self, interview_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±—ç–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ interview_results —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if interview_results is None or len(interview_results) == 0:
            return {
                "total_score": 0,
                "verdict": "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "detailed_feedback": ["‚ùå –ù–µ –±—ã–ª–æ –¥–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"],
                "improvement_suggestions": [
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑",
                    "–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥—Ä–æ–±–Ω–æ"
                ]
            }
        
        total_score = sum(result["score"] for result in interview_results) / len(interview_results)
        
        if total_score >= 9:
            verdict = "–û—Ç–ª–∏—á–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫ –Ω–∞–π–º—É"
            feedback = [
                "‚úÖ –°–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–∏",
                "‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è",
                "‚úÖ –•–æ—Ä–æ—à–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏",
                "‚úÖ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω"
            ]
        elif total_score >= 7:
            verdict = "–•–æ—Ä–æ—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç, —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
            feedback = [
                "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
                "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è",
                "‚úÖ –•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞",
                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é"
            ]
        else:
            verdict = "–¢—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
            feedback = [
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç/–∑–Ω–∞–Ω–∏—è",
                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ",
                "üí° –ù—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –æ—Ç–≤–µ—Ç–∞–º–∏",
                "üí° –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ 6-12 –º–µ—Å—è—Ü–µ–≤"
            ]
        
        return {
            "total_score": round(total_score, 1),
            "verdict": verdict,
            "detailed_feedback": feedback,
            "improvement_suggestions": [
                "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–ò–∑—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏",
                "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞",
                "–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"
            ]
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
@st.cache_resource
def get_interview_assistant():
    return InterviewAssistant()

interview_assistant = get_interview_assistant()

# =============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô
# =============================================

def show_interview_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    st.markdown('<div class="main-header">üé§ AI –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</div>', unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    resumes = get_user_resumes(st.session_state.user_id)
    
    if not resumes:
        st.info("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        create_demo_resume()
        resumes = get_user_resumes(st.session_state.user_id)
        st.success("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.info("üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—é–º–µ
    resume_options = {}
    for resume in resumes:
        resume_name = f"{resume[2]} - {resume[8] or '–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}"
        if resume[11]:  # is_analyzed
            resume_name += " ‚úÖ"
        else:
            resume_name += " ‚ö†Ô∏è (–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)"
        resume_options[resume_name] = resume
    
    selected_resume_key = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ:", list(resume_options.keys()))
    selected_resume = resume_options[selected_resume_key]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    col1, col2 = st.columns(2)
    with col1:
        interview_type = st.selectbox("–¢–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:", 
                                    ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ", "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ"])
    with col2:
        question_count = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:", 3, 10, 5)
    
    position = selected_resume[8] or "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
    experience_level = selected_resume[9] or "Middle"
    
    st.markdown(f"""
    **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:**
    - üéØ **–ü–æ–∑–∏—Ü–∏—è:** {position}
    - üìä **–£—Ä–æ–≤–µ–Ω—å:** {experience_level}
    - üé™ **–¢–∏–ø:** {interview_type}
    - ‚ùì **–í–æ–ø—Ä–æ—Å–æ–≤:** {question_count}
    """)
    
    if st.button("üéØ –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", use_container_width=True, type="primary"):
        st.session_state.interview_data = {
            "resume_id": selected_resume[0],
            "position": position,
            "experience_level": experience_level,
            "interview_type": interview_type,
            "questions": interview_assistant.generate_questions(position, experience_level, question_count),
            "current_question": 0,
            "answers": [],
            "start_time": time.time(),
            "results": []
        }
        st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
    show_interview_history()

def create_demo_resume():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ä–µ–∑—é–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    demo_resume_text = """
    –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
    Python –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    
    –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
    - Middle Python Developer –≤ TechCompany (2 –≥–æ–¥–∞)
    - Junior Python Developer –≤ StartupInc (1 –≥–æ–¥)
    
    –ù–∞–≤—ã–∫–∏:
    Python, Django, Flask, SQL, PostgreSQL, Git, Docker, Linux
    
    –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
    –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞, –§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏
    
    –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
    - –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 10k+ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª SQL –∑–∞–ø—Ä–æ—Å—ã, —É—Å–∫–æ—Ä–∏–≤ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ 40%
    - –í–Ω–µ–¥—Ä–∏–ª CI/CD –ø—Ä–æ—Ü–µ—Å—Å, —Å–æ–∫—Ä–∞—Ç–∏–≤ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è –Ω–∞ 60%
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-—Ä–µ–∑—é–º–µ
    verification = verify_resume_authenticity(demo_resume_text)
    save_resume_to_db(
        st.session_state.user_id,
        "demo_resume.txt",
        demo_resume_text.encode('utf-8'),
        "text/plain",
        len(demo_resume_text),
        verification
    )

def conduct_interview():
    """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    interview_data = st.session_state.interview_data
    
    st.markdown(f'<div class="sub-header">üé§ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {interview_data["position"]}</div>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    progress = (interview_data["current_question"] + 1) / len(interview_data["questions"])
    st.progress(progress)
    st.write(f"–í–æ–ø—Ä–æ—Å {interview_data['current_question'] + 1} –∏–∑ {len(interview_data['questions'])}")
    
    # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question = interview_data["questions"][interview_data["current_question"]]
    
    st.markdown(f'<div class="interview-question">‚ùì {current_question}</div>', unsafe_allow_html=True)
    
    # –ü–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    answer = st.text_area("–í–∞—à –æ—Ç–≤–µ—Ç:", height=150, 
                         placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å... –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞.",
                         key=f"answer_{interview_data['current_question']}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", use_container_width=True):
            if answer.strip():
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                evaluation = interview_assistant.evaluate_answer(
                    current_question, 
                    answer, 
                    interview_data["position"]
                )
                
                interview_data["answers"].append(answer)
                interview_data["results"].append(evaluation)
                interview_data["current_question"] += 1
                
                if interview_data["current_question"] >= len(interview_data["questions"]):
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
                    st.session_state.interview_complete = True
                
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")
    
    with col2:
        if st.button("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", use_container_width=True, type="secondary"):
            st.session_state.interview_complete = True
            st.rerun()

def show_interview_results():
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    interview_data = st.session_state.interview_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not interview_data or "results" not in interview_data:
        st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", use_container_width=True):
            for key in ['interview_data', 'interview_complete']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration = int(time.time() - interview_data["start_time"])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±—ç–∫
    final_feedback = interview_assistant.generate_final_feedback(interview_data["results"])
    
    st.markdown('<div class="sub-header">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</div>', unsafe_allow_html=True)
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f'<div class="metric-card">üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: <span style="font-size: 2rem; color: #FF6B35;">{final_feedback["total_score"]}/10</span></div>', unsafe_allow_html=True)
    with col2:
        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{duration//60} –º–∏–Ω {duration%60} —Å–µ–∫")
    with col3:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", len(interview_data["questions"]))
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if final_feedback["total_score"] >= 9:
        st.markdown(f'<div class="success-card"><strong>–í–µ—Ä–¥–∏–∫—Ç:</strong> {final_feedback["verdict"]}</div>', unsafe_allow_html=True)
    elif final_feedback["total_score"] >= 7:
        st.markdown(f'<div class="warning-card"><strong>–í–µ—Ä–¥–∏–∫—Ç:</strong> {final_feedback["verdict"]}</div>', unsafe_allow_html=True)
    else:
        st.markdown(f'<div class="error-card"><strong>–í–µ—Ä–¥–∏–∫—Ç:</strong> {final_feedback["verdict"]}</div>', unsafe_allow_html=True)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±—ç–∫
    st.markdown("**üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:**")
    for feedback in final_feedback["detailed_feedback"]:
        st.write(f"‚Ä¢ {feedback}")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    st.markdown("---")
    st.markdown("**üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:**")
    
    for i, (question, result) in enumerate(zip(interview_data["questions"], interview_data["results"])):
        with st.expander(f"–í–æ–ø—Ä–æ—Å {i+1}: {question[:50]}... (–û—Ü–µ–Ω–∫–∞: {result['score']}/10)"):
            col_q1, col_q2 = st.columns([2, 1])
            
            with col_q1:
                st.markdown("**–í–∞—à –æ—Ç–≤–µ—Ç:**")
                st.write(interview_data["answers"][i])
            
            with col_q2:
                st.markdown("**–û—Ü–µ–Ω–∫–∞:**")
                for criterion, score in result["criteria"].items():
                    st.write(f"‚Ä¢ {criterion}: {score}/10")
                
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                for fb in result["feedback"]:
                    st.write(f"‚Ä¢ {fb}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    st.markdown("---")
    st.markdown("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**")
    for suggestion in final_feedback["improvement_suggestions"]:
        st.write(f"‚Ä¢ {suggestion}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
        success = auth_system.save_interview_result(
            st.session_state.user_id,
            interview_data["interview_type"],
            interview_data["position"],
            interview_data["questions"],
            interview_data["answers"],
            json.dumps(final_feedback),
            final_feedback["total_score"],
            duration
        )
        
        if success:
            st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", use_container_width=True):
        for key in ['interview_data', 'interview_complete']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

def show_interview_history():
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π"""
    interviews = auth_system.get_user_interviews(st.session_state.user_id)
    
    if interviews:
        st.markdown("---")
        st.markdown("**üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:**")
        
        for interview in interviews[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            with st.container():
                col1, col2, col3 = st.columns([3, 2, 1])
                
                with col1:
                    st.markdown(f"**{interview[3]}** - {interview[2]}")
                    st.markdown(f"*{interview[9]}*")
                
                with col2:
                    score = interview[7]
                    st.markdown(f"**–û—Ü–µ–Ω–∫–∞:** {score}/10")
                    if score >= 9:
                        st.success("–û—Ç–ª–∏—á–Ω–æ")
                    elif score >= 7:
                        st.warning("–•–æ—Ä–æ—à–æ")
                    else:
                        st.error("–¢—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç—ã")
                
                with col3:
                    if st.button("üìä –î–µ—Ç–∞–ª–∏", key=f"details_{interview[0]}", use_container_width=True):
                        st.session_state.selected_interview = interview[0]
                        st.rerun()
                
                st.markdown("---")

def show_interview_details(interview_id):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    interviews = auth_system.get_user_interviews(st.session_state.user_id)
    interview = next((i for i in interviews if i[0] == interview_id), None)
    
    if not interview:
        st.error("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    st.markdown(f'<div class="sub-header">üìã –î–µ—Ç–∞–ª–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"**–ü–æ–∑–∏—Ü–∏—è:** {interview[3]}")
        st.markdown(f"**–¢–∏–ø:** {interview[2]}")
    with col2:
        st.markdown(f"**–û—Ü–µ–Ω–∫–∞:** {interview[7]}/10")
        st.markdown(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {interview[8]} —Å–µ–∫")
    with col3:
        st.markdown(f"**–î–∞—Ç–∞:** {interview[9]}")
    
    # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    try:
        questions = json.loads(interview[4]) if interview[4] else []
        answers = json.loads(interview[5]) if interview[5] else []
        feedback = json.loads(interview[6]) if interview[6] else {}
        
        st.markdown("### –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:")
        for i, (question, answer) in enumerate(zip(questions, answers)):
            with st.expander(f"–í–æ–ø—Ä–æ—Å {i+1}: {question}"):
                st.markdown("**–û—Ç–≤–µ—Ç:**")
                st.write(answer)
        
        if feedback:
            st.markdown("### –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:")
            st.write(feedback.get('verdict', ''))
            for fb in feedback.get('detailed_feedback', []):
                st.write(f"‚Ä¢ {fb}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏", use_container_width=True):
        st.session_state.selected_interview = None
        st.rerun()

# =============================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø HR –ò–ù–¢–ï–†–§–ï–ô–°–ê - –ö–ê–ù–î–ò–î–ê–¢–´
# =============================================

def show_candidates_section():
    """–†–∞–∑–¥–µ–ª –±–∞–∑—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    st.markdown('<div class="sub-header">üë• –ë–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>', unsafe_allow_html=True)
    
    # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    col_search, col_filter, col_sort = st.columns([2, 2, 1])
    
    with col_search:
        search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...")
    
    with col_filter:
        position_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏", ["–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫", "–î–∏–∑–∞–π–Ω–µ—Ä"])
    
    with col_sort:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", ["–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–û—Ü–µ–Ω–∫–∞", "–ò–º—è"])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = get_all_candidates()
    
    if not candidates:
        st.info("‚ÑπÔ∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ.")
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_candidates = candidates
    
    if search_term:
        filtered_candidates = [c for c in filtered_candidates 
                             if search_term.lower() in (c[7] or '').lower() 
                             or search_term.lower() in (c[2] or '').lower()]
    
    if position_filter != "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏":
        filtered_candidates = [c for c in filtered_candidates if c[2] == position_filter]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if sort_by == "–û—Ü–µ–Ω–∫–∞":
        filtered_candidates.sort(key=lambda x: x[11] or 0, reverse=True)
    elif sort_by == "–ò–º—è":
        filtered_candidates.sort(key=lambda x: x[7] or '')
    else:  # –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        filtered_candidates.sort(key=lambda x: x[4] or '', reverse=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
    with col_stats1:
        st.metric("–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", len(filtered_candidates))
    with col_stats2:
        analyzed = len([c for c in filtered_candidates if c[11]])
        st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", analyzed)
    with col_stats3:
        avg_score = sum(c[11] or 0 for c in filtered_candidates) / len(filtered_candidates) if filtered_candidates else 0
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_score:.1f}%")
    with col_stats4:
        unique_positions = len(set(c[2] for c in filtered_candidates if c[2]))
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", unique_positions)
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    for candidate in filtered_candidates:
        with st.container():
            st.markdown('<div class="candidate-card">', unsafe_allow_html=True)
            
            col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
            
            with col1:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.markdown(f"### {candidate[7] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                st.markdown(f"**üíº –ü–æ–∑–∏—Ü–∏—è:** {candidate[2] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
                st.markdown(f"**üìä –£—Ä–æ–≤–µ–Ω—å:** {candidate[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                
                # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if candidate[9]:  # phone
                    st.markdown(f"**üìû –¢–µ–ª–µ—Ñ–æ–Ω:** {candidate[9]}")
                if candidate[10]:  # location
                    st.markdown(f"**üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {candidate[10]}")
                if candidate[8]:  # email
                    st.markdown(f"**üìß Email:** {candidate[8]}")
            
            with col2:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ
                if candidate[11]:  # authenticity_score
                    score = candidate[11]
                    st.markdown(f"**üéØ –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏:** {score}%")
                    st.progress(score / 100)
                    st.markdown(f"**‚úÖ –í–µ—Ä–¥–∏–∫—Ç:** {candidate[12] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
                else:
                    st.markdown("**üîç –°—Ç–∞—Ç—É—Å:** –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                
                st.markdown(f"**üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:** {candidate[4][:10] if candidate[4] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            
            with col3:
                # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                if st.button("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{candidate[0]}", use_container_width=True):
                    st.session_state.selected_candidate = candidate[0]
                    st.rerun()
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
                resume_file = get_resume_file(candidate[0])
                if resume_file and resume_file[1]:
                    download_link = create_download_link(resume_file[1], resume_file[0], resume_file[2])
                    if download_link:
                        st.markdown(download_link, unsafe_allow_html=True)
            
            with col4:
                # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                is_favorite = is_in_favorites(st.session_state.user_id, candidate[6])
                
                if is_favorite:
                    if st.button("‚≠ê –£–±—Ä–∞—Ç—å", key=f"unfav_{candidate[0]}", use_container_width=True):
                        if remove_from_favorites(st.session_state.user_id, candidate[6]):
                            st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
                            st.rerun()
                else:
                    if st.button("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", key=f"fav_{candidate[0]}", use_container_width=True):
                        if add_to_favorites(st.session_state.user_id, candidate[6], candidate[0]):
                            st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
                            st.rerun()
            
            st.markdown('</div>', unsafe_allow_html=True)

def show_candidate_details(candidate_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ"""
    candidates = get_all_candidates()
    candidate = next((c for c in candidates if c[0] == candidate_id), None)
    
    if not candidate:
        st.error("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    st.markdown(f'<div class="sub-header">üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {candidate[7]}</div>', unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown(f"**–ü–æ–ª–Ω–æ–µ –∏–º—è:** {candidate[7]}")
        st.markdown(f"**Email:** {candidate[8]}")
        st.markdown(f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {candidate[9] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        st.markdown(f"**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {candidate[10] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        st.markdown(f"**–ü–æ–∑–∏—Ü–∏—è:** {candidate[2] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
        st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:** {candidate[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        st.markdown(f"**–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:** {candidate[4] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    with col2:
        st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ")
        if candidate[11]:
            score = candidate[11]
            st.markdown(f"**–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏:** {score}%")
            st.progress(score / 100)
            st.markdown(f"**–í–µ—Ä–¥–∏–∫—Ç:** {candidate[12]}")
            st.markdown(f"**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {candidate[13] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        else:
            st.markdown("**üîç –†–µ–∑—é–º–µ –µ—â–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ**")
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
    st.markdown("### üéØ –î–µ–π—Å—Ç–≤–∏—è")
    
    col_actions1, col_actions2, col_actions3, col_actions4 = st.columns(4)
    
    with col_actions1:
        # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        is_favorite = is_in_favorites(st.session_state.user_id, candidate[6])
        if is_favorite:
            if st.button("‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", use_container_width=True):
                if remove_from_favorites(st.session_state.user_id, candidate[6]):
                    st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
                    st.rerun()
        else:
            if st.button("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", use_container_width=True):
                notes = st.text_input("–ó–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", key=f"notes_{candidate_id}")
                if add_to_favorites(st.session_state.user_id, candidate[6], candidate_id, notes):
                    st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
                    st.rerun()
    
    with col_actions2:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
        resume_file = get_resume_file(candidate_id)
        if resume_file and resume_file[1]:
            download_link = create_download_link(resume_file[1], resume_file[0], resume_file[2])
            if download_link:
                st.markdown(download_link, unsafe_allow_html=True)
        else:
            st.info("üìÑ –†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    with col_actions3:
        if st.button("üìû –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é", use_container_width=True):
            st.success(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {candidate[7]}!")
    
    with col_actions4:
        if st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", use_container_width=True):
            st.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {candidate[8]}")
    
    st.markdown("---")
    
    # –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    st.markdown("### üìù –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    st.info("""
    **–ë—É–¥—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:**
    - üìû –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ –∏ –≤—Å—Ç—Ä–µ—á
    - üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
    - üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    - üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –Ω–∞–π–º–∞
    """)
    
    if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", use_container_width=True):
        st.session_state.selected_candidate = None
        st.rerun()

def show_favorites_section():
    """–†–∞–∑–¥–µ–ª –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    st.markdown('<div class="sub-header">‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã</div>', unsafe_allow_html=True)
    
    favorites = get_favorites(st.session_state.user_id)
    
    if not favorites:
        st.info("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
    col_stats1, col_stats2, col_stats3 = st.columns(3)
    with col_stats1:
        st.metric("–í—Å–µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", len(favorites))
    with col_stats2:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        try:
            avg_score = sum(float(f[9]) if f[9] is not None and str(f[9]).replace('.', '').replace(',', '').isdigit() else 0 for f in favorites) / len(favorites) if favorites else 0
            st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_score:.1f}%")
        except (ValueError, TypeError):
            st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", "N/A")
    with col_stats3:
        unique_positions = len(set(f[6] for f in favorites if f[6]))
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", unique_positions)
    
    st.markdown("---")
    
    for fav in favorites:
        with st.container():
            st.markdown('<div class="candidate-card">', unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns([3, 2, 1])
            
            with col1:
                st.markdown(f"### {fav[4] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                st.markdown(f"**üíº –ü–æ–∑–∏—Ü–∏—è:** {fav[6] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
                st.markdown(f"**üìä –£—Ä–æ–≤–µ–Ω—å:** {fav[7] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                st.markdown(f"**üìß Email:** {fav[5]}")
                if fav[3]:  # notes
                    st.markdown(f"**üìù –ó–∞–º–µ—Ç–∫–∏:** {fav[3]}")
            
            with col2:
                if fav[9] is not None:  # authenticity_score - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    try:
                        score = float(fav[9]) if str(fav[9]).replace('.', '').replace(',', '').isdigit() else 0
                        st.markdown(f"**üéØ –û—Ü–µ–Ω–∫–∞:** {score}%")
                        st.progress(score / 100)
                    except (ValueError, TypeError):
                        st.markdown(f"**üéØ –û—Ü–µ–Ω–∫–∞:** {fav[9]}")
                        st.progress(0)
                    st.markdown(f"**‚úÖ –í–µ—Ä–¥–∏–∫—Ç:** {fav[10] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
                else:
                    st.markdown("**üéØ –û—Ü–µ–Ω–∫–∞:** –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                st.markdown(f"**‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ:** {fav[8] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            
            with col3:
                if st.button("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_fav_{fav[0]}", use_container_width=True):
                    st.session_state.selected_candidate = fav[3]  # resume_id
                    st.rerun()
                
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"remove_{fav[0]}", use_container_width=True):
                    if remove_from_favorites(st.session_state.user_id, fav[2]):  # candidate_user_id
                        st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
                        st.rerun()
            
            st.markdown('</div>', unsafe_allow_html=True)

# =============================================
# –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò HR –ò–ù–¢–ï–†–§–ï–ô–°–ê
# =============================================

def show_hr_interface():
    """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å HR"""
    st.markdown('<div class="main-header">üíº –ü–∞–Ω–µ–ª—å HR</div>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
    if st.session_state.get('selected_candidate'):
        show_candidate_details(st.session_state.selected_candidate)
    else:
        if st.session_state.hr_section == "candidates":
            show_candidates_section()
        elif st.session_state.hr_section == "favorites":
            show_favorites_section()
        elif st.session_state.hr_section == "analytics":
            show_hr_analytics()
        elif st.session_state.hr_section == "settings":
            show_hr_settings()
        elif st.session_state.hr_section == "database":
            show_database_viewer()

def show_hr_analytics():
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è HR"""
    st.markdown('<div class="sub-header">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>', unsafe_allow_html=True)
    
    candidates = get_all_candidates()
    
    if not candidates:
        st.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    position_data = {}
    score_data = []
    location_data = {}
    
    for candidate in candidates:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        position = candidate[2] or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        if position in position_data:
            position_data[position] += 1
        else:
            position_data[position] = 1
        
        # –û—Ü–µ–Ω–∫–∏
        if candidate[11]:
            score_data.append(candidate[11])
        
        # –õ–æ–∫–∞—Ü–∏–∏
        location = candidate[10] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if location in location_data:
            location_data[location] += 1
        else:
            location_data[location] = 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", len(candidates))
    with col2:
        analyzed = len([c for c in candidates if c[11]])
        st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", analyzed)
    with col3:
        avg_score = sum(score_data) / len(score_data) if score_data else 0
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_score:.1f}%")
    with col4:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", len(position_data))
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    if score_data:
        col_chart1, col_chart2 = st.columns(2)
        
        with col_chart1:
            if position_data:
                fig_positions = px.pie(
                    values=list(position_data.values()),
                    names=list(position_data.keys()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º",
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                fig_positions.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig_positions, use_container_width=True)
        
        with col_chart2:
            fig_scores = px.histogram(
                x=score_data,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                nbins=10,
                color_discrete_sequence=['#FF6B35']
            )
            fig_scores.update_layout(
                xaxis_title="–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (%)",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
            )
            st.plotly_chart(fig_scores, use_container_width=True)
    
    # –¢–æ–ø –ª–æ–∫–∞—Ü–∏–π
    if location_data:
        top_locations = dict(sorted(location_data.items(), key=lambda x: x[1], reverse=True)[:10])
        fig_locations = px.bar(
            x=list(top_locations.values()),
            y=list(top_locations.keys()),
            orientation='h',
            title="–¢–æ–ø-10 –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
            color_discrete_sequence=['#4facfe']
        )
        st.plotly_chart(fig_locations, use_container_width=True)

def show_hr_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HR"""
    st.markdown('<div class="sub-header">‚öôÔ∏è –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏</div>', unsafe_allow_html=True)
    
    st.markdown("**üìù –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:**")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    default_questions = [
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—É—Ç–∏.",
        "–ü–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏?",
        "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
        "–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
        "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
        "–ì–¥–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?",
        "–ü–æ—á–µ–º—É –≤—ã —É—Ö–æ–¥–∏—Ç–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º —Å–∞–º–æ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.",
        "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –¥–∞–≤–ª–µ–Ω–∏–µ–º?",
        "–ö–∞–∫–æ–π —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥–æ–π –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"
    ]
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    edited_questions = []
    for i, question in enumerate(default_questions):
        edited_question = st.text_area(f"–í–æ–ø—Ä–æ—Å {i+1}", value=question, key=f"question_{i}")
        edited_questions.append(edited_question)
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", use_container_width=True):
        st.session_state.custom_questions = edited_questions
        st.success("‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    st.markdown("---")
    st.markdown("**üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:**")
    
    col_crit1, col_crit2 = st.columns(2)
    
    with col_crit1:
        min_score = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", 0, 100, 70, key="min_score")
        tech_weight = st.slider("–í–µ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ (%)", 0, 100, 40, key="tech_weight")
    
    with col_crit2:
        exp_weight = st.slider("–í–µ—Å –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã (%)", 0, 100, 30, key="exp_weight")
        soft_weight = st.slider("–í–µ—Å soft skills (%)", 0, 100, 30, key="soft_weight")
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏", use_container_width=True):
        st.success("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def show_database_viewer():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    st.markdown('<div class="sub-header">üóÉÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</div>', unsafe_allow_html=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stats = auth_system.get_table_statistics()
    if stats:
        cols = st.columns(len(stats))
        for i, (table, count) in enumerate(stats.items()):
            with cols[i]:
                st.metric(f"–¢–∞–±–ª–∏—Ü–∞: {table}", count)
    
    st.markdown("---")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    view_mode = st.radio("–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", ["–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü", "SQL –∑–∞–ø—Ä–æ—Å—ã"], horizontal=True)
    
    if view_mode == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü":
        show_table_viewer()
    else:
        show_sql_query_interface()

def show_table_viewer():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    tables = auth_system.get_database_tables()
    
    if not tables:
        st.error("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü")
        return
    
    selected_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", tables)
    
    if selected_table:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        df, columns_info = auth_system.get_table_data(selected_table)
        
        if df is not None:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
            st.markdown(f"### üìã –¢–∞–±–ª–∏—Ü–∞: `{selected_table}`")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
            with st.expander("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö"):
                if columns_info:
                    col_info_df = pd.DataFrame(columns_info, 
                                            columns=['cid', 'name', 'type', 'notnull', 'default', 'pk'])
                    st.dataframe(col_info_df[['name', 'type', 'notnull', 'pk']], use_container_width=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            st.markdown("### üìä –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
            col1, col2 = st.columns([2, 1])
            with col1:
                search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ:", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
            with col2:
                rows_per_page = st.selectbox("–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:", [10, 25, 50, 100], index=0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if search_term:
                try:
                    mask = df.astype(str).apply(lambda x: x.str.contains(search_term, case=False, na=False)).any(axis=1)
                    filtered_df = df[mask]
                except:
                    filtered_df = df
            else:
                filtered_df = df
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            if not filtered_df.empty:
                total_rows = len(filtered_df)
                st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:** {total_rows}")
                
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                if total_rows > rows_per_page:
                    total_pages = (total_rows + rows_per_page - 1) // rows_per_page
                    page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞:", min_value=1, max_value=total_pages, value=1)
                    start_idx = (page - 1) * rows_per_page
                    end_idx = min(start_idx + rows_per_page, total_rows)
                    
                    st.dataframe(filtered_df.iloc[start_idx:end_idx], use_container_width=True)
                    st.write(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø–∏—Å–∏ {start_idx + 1}-{end_idx} –∏–∑ {total_rows}")
                else:
                    st.dataframe(filtered_df, use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                col_export1, col_export2, col_export3 = st.columns(3)
                
                with col_export1:
                    csv = filtered_df.to_csv(index=False)
                    st.download_button(
                        label="üì• CSV",
                        data=csv,
                        file_name=f"{selected_table}.csv",
                        mime="text/csv",
                        use_container_width=True
                    )
            else:
                st.info("‚ÑπÔ∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã")

def show_sql_query_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    st.markdown("### üõ†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    st.warning("""
    ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤. 
    –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """)
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    with st.expander("üìö –ü—Ä–∏–º–µ—Ä—ã SQL –∑–∞–ø—Ä–æ—Å–æ–≤"):
        examples = {
            "SELECT": "SELECT * FROM users LIMIT 10;",
            "JOIN": """SELECT u.full_name, r.filename, ra.authenticity_score 
                      FROM users u 
                      JOIN resumes r ON u.id = r.user_id 
                      JOIN resume_analyses ra ON r.id = ra.resume_id 
                      LIMIT 10;""",
            "COUNT": "SELECT user_type, COUNT(*) as count FROM users GROUP BY user_type;"
        }
        
        selected_example = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:", list(examples.keys()))
        if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä"):
            st.session_state.sql_query = examples[selected_example]
    
    # –í–≤–æ–¥ SQL –∑–∞–ø—Ä–æ—Å–∞
    sql_query = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å:",
        height=150,
        key="sql_query",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: SELECT * FROM users WHERE user_type = 'candidate';"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        execute_btn = st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", use_container_width=True)
    with col2:
        clear_btn = st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True)
    
    if clear_btn:
        st.session_state.sql_query = ""
        st.rerun()
    
    if execute_btn and sql_query:
        with st.spinner("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞..."):
            result, message = auth_system.execute_custom_query(sql_query)
            
            if result is not None:
                st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:** {len(result)}")
                st.dataframe(result, use_container_width=True)
            elif message:
                st.success(message)

# =============================================
# –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –°–ò–°–¢–ï–ú–´
# =============================================

def init_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'user_type' not in st.session_state:
        st.session_state.user_type = None
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    
    # –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
    if 'user_id' not in st.session_state:
        st.session_state.user_id = None
    if 'username' not in st.session_state:
        st.session_state.username = ""
    if 'full_name' not in st.session_state:
        st.session_state.full_name = ""
    if 'company' not in st.session_state:
        st.session_state.company = ""
    if 'phone' not in st.session_state:
        st.session_state.phone = ""
    if 'location' not in st.session_state:
        st.session_state.location = ""
    if 'show_profile' not in st.session_state:
        st.session_state.show_profile = False
    if 'change_password' not in st.session_state:
        st.session_state.change_password = False
    
    # –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –†–ê–ó–î–ï–õ–û–í HR
    if 'hr_section' not in st.session_state:
        st.session_state.hr_section = "candidates"
    
    # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
    if 'show_database' not in st.session_state:
        st.session_state.show_database = False
    
    # –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô
    if 'interview_data' not in st.session_state:
        st.session_state.interview_data = None
    if 'interview_complete' not in st.session_state:
        st.session_state.interview_complete = False
    if 'selected_interview' not in st.session_state:
        st.session_state.selected_interview = None
    
    # –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ö–ê–ù–î–ò–î–ê–¢–û–í
    if 'selected_candidate' not in st.session_state:
        st.session_state.selected_candidate = None
    if 'custom_questions' not in st.session_state:
        st.session_state.custom_questions = []

def detect_position_from_resume(resume_text):
    """AI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Ä–µ–∑—é–º–µ"""
    positions = {
        "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 
        "developer": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–º–µ–Ω–µ–¥–∂–µ—Ä": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        "–∞–Ω–∞–ª–∏—Ç–∏–∫": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "analyst": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "–¥–∏–∑–∞–π–Ω–µ—Ä": "–î–∏–∑–∞–π–Ω–µ—Ä",
        "designer": "–î–∏–∑–∞–π–Ω–µ—Ä",
        "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥": "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
        "marketing": "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
        "–ø—Ä–æ–¥–∞–∂": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
        "sales": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
    }
    
    for keyword, position in positions.items():
        if keyword in resume_text.lower():
            return position
    
    return "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

def verify_resume_authenticity(resume_text, uploaded_file=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ –Ω–∞ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é AI"""
    import random
    
    try:
        detected_position = detect_position_from_resume(resume_text)
        authenticity_score = random.randint(70, 95)
        
        flags = []
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if len(resume_text) < 500:
            flags.append("–°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö")
        
        if "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã" not in resume_text.lower():
            flags.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã")
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ä–æ–∫–æ–≤")
        
        if "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" not in resume_text.lower():
            flags.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º")
            recommendations.append("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏")
        
        if len(flags) == 0:
            flags.append("–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        if len(recommendations) == 0:
            recommendations = [
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏",
                "–£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ –∫–∞–∂–¥–æ–º –º–µ—Å—Ç–µ",
                "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"
            ]
        
        return {
            "score": authenticity_score,
            "flags": flags,
            "recommendations": recommendations,
            "verdict": "–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ" if authenticity_score >= 80 else "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "detected_position": detected_position
        }
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ: {e}")
        return {
            "score": 75,
            "flags": ["–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º"],
            "recommendations": ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—é–º–µ –ø–æ–∑–∂–µ"],
            "verdict": "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "detected_position": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
        }

def save_resume_to_db(user_id, filename, file_content, file_type, file_size, analysis_result):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ
        cursor.execute('''
            INSERT INTO resumes 
            (user_id, filename, file_content, file_type, file_size, original_text, 
             detected_position, experience_level, is_analyzed, analysis_date)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            filename,
            file_content,
            file_type,
            file_size,
            file_content if isinstance(file_content, str) else "",
            analysis_result['detected_position'],
            "Middle",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            True,
            datetime.now().isoformat()
        ))
        
        resume_id = cursor.lastrowid
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        cursor.execute('''
            INSERT INTO resume_analyses 
            (resume_id, user_id, authenticity_score, detected_position, flags, 
             recommendations, verdict, analysis_data)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            resume_id,
            user_id,
            analysis_result['score'],
            analysis_result['detected_position'],
            json.dumps(analysis_result['flags']),
            json.dumps(analysis_result['recommendations']),
            analysis_result['verdict'],
            json.dumps(analysis_result)
        ))
        
        conn.commit()
        conn.close()
        return resume_id
        
    except Exception as e:
        print(f"Error saving resume to DB: {e}")
        return None

def get_user_resumes(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(auth_system.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM resumes WHERE user_id = ? ORDER BY upload_date DESC
        ''', (user_id,))
        
        resumes = cursor.fetchall()
        conn.close()
        return resumes
        
    except Exception as e:
        print(f"Error getting user resumes: {e}")
        return []

# =============================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê
# =============================================

def show_login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    st.markdown("""
    <div style='text-align: center; padding: 3rem 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; margin-bottom: 2rem;'>
        <h1 style='color: white; font-size: 4rem; margin-bottom: 1rem;'>üíº –ö–∞–Ω–¥–∏–î–ê</h1>
        <p style='color: white; font-size: 1.5rem; opacity: 0.9;'>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üîê –í—Ö–æ–¥", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with tab1:
        st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        
        login_username = st.text_input("–õ–æ–≥–∏–Ω", key="login_username")
        login_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
        
        if st.button("–í–æ–π—Ç–∏", key="login_btn", use_container_width=True):
            if login_username and login_password:
                user = auth_system.authenticate_user(login_username, login_password)
                
                if user:
                    st.session_state.logged_in = True
                    st.session_state.user_id = user['id']
                    st.session_state.username = user['username']
                    st.session_state.user_type = user['user_type']
                    st.session_state.full_name = user['full_name']
                    st.session_state.company = user.get('company', '')
                    st.session_state.phone = user.get('phone', '')
                    st.session_state.location = user.get('location', '')
                    
                    st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!")
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            else:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        with st.expander("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"):
            st.write("**HR:** –õ–æ–≥–∏–Ω: `hr_manager` –ü–∞—Ä–æ–ª—å: `hr123`")
            st.write("**–ö–∞–Ω–¥–∏–¥–∞—Ç:** –õ–æ–≥–∏–Ω: `candidate` –ü–∞—Ä–æ–ª—å: `candidate123`")
            st.write("**–ê–¥–º–∏–Ω:** –õ–æ–≥–∏–Ω: `admin` –ü–∞—Ä–æ–ª—å: `admin123`")
    
    with tab2:
        st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            reg_email = st.text_input("Email", key="reg_email")
            reg_username = st.text_input("–õ–æ–≥–∏–Ω", key="reg_username")
            reg_full_name = st.text_input("–§–ò–û", key="reg_full_name")
            user_type = st.selectbox("–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ["candidate", "hr"], 
                                   format_func=lambda x: "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å" if x == "candidate" else "HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        with col2:
            reg_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password")
            reg_confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", key="reg_confirm_password")
            
            if user_type == "hr":
                company = st.text_input("–ö–æ–º–ø–∞–Ω–∏—è", key="reg_company")
                position = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å", key="reg_position")
                phone = ""
                location = ""
            else:
                company = ""
                position = ""
                phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", key="reg_phone")
                location = st.text_input("–ì–æ—Ä–æ–¥", key="reg_location")
        
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", key="reg_btn", use_container_width=True):
            if all([reg_email, reg_username, reg_password, reg_confirm_password, reg_full_name]):
                if reg_password == reg_confirm_password:
                    user_data = {
                        'email': reg_email,
                        'username': reg_username,
                        'password': reg_password,
                        'full_name': reg_full_name,
                        'user_type': user_type,
                        'company': company,
                        'position': position,
                        'phone': phone,
                        'location': location
                    }
                    
                    if auth_system.create_user(user_data):
                        st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                        st.rerun()
                    else:
                        st.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

def show_candidate_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π"""
    st.markdown('<div class="main-header">üíº –ö–∞–Ω–¥–∏–î–ê</div>', unsafe_allow_html=True)
    st.markdown('<div style="text-align: center; color: #6C757D; font-size: 1.2rem; margin-bottom: 3rem;">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ</div>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs(["üé§ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìÅ –ú–æ–∏ —Ä–µ–∑—é–º–µ"])
    
    with tab1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        if st.session_state.get('interview_complete'):
            show_interview_results()
        elif st.session_state.get('interview_data'):
            conduct_interview()
        elif st.session_state.get('selected_interview'):
            show_interview_details(st.session_state.selected_interview)
        else:
            show_interview_interface()
    
    with tab2:
        show_resume_analysis_section()
    
    with tab3:
        show_candidate_stats()
    
    with tab4:
        show_my_resumes()

def show_resume_analysis_section():
    """–†–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ"""
    st.markdown('<div class="sub-header">üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—é–º–µ –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å</div>', unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader("üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ", type=["pdf", "docx", "txt"])
    resume_text = st.text_area("‚úçÔ∏è –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ", height=200, 
                             placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã...\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...\n–ù–∞–≤—ã–∫–∏...\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
    
    if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", use_container_width=True, type="primary"):
        if uploaded_file or resume_text:
            with st.spinner("üîÑ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ..."):
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if uploaded_file:
                        file_content = uploaded_file.getvalue()
                        filename = uploaded_file.name
                        file_type = uploaded_file.type
                        file_size = uploaded_file.size
                        if uploaded_file.type == "text/plain":
                            resume_content = uploaded_file.getvalue().decode('utf-8')
                        else:
                            resume_content = f"–§–∞–π–ª: {filename}"
                    else:
                        file_content = resume_text.encode('utf-8')
                        filename = f"resume_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                        file_type = "text/plain"
                        file_size = len(resume_text.encode('utf-8'))
                        resume_content = resume_text
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
                    verification = verify_resume_authenticity(resume_content, uploaded_file)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    resume_id = save_resume_to_db(
                        st.session_state.user_id,
                        filename,
                        file_content,
                        file_type,
                        file_size,
                        verification
                    )
                    
                    st.session_state.current_verification = verification
                    st.success("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ!")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—é–º–µ: {e}")
        else:
            st.error("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ")
    
    if st.session_state.get('current_verification'):
        show_analysis_results(st.session_state.current_verification)

def show_analysis_results(verification):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    st.markdown("---")
    st.markdown('<div class="sub-header">üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</div>', unsafe_allow_html=True)
    
    col3, col4 = st.columns([2, 1])
    
    with col3:
        st.markdown(f'<div class="metric-card">üéØ –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: <span style="font-size: 2rem; color: #FF6B35;">{verification["score"]}%</span></div>', unsafe_allow_html=True)
        st.progress(verification["score"] / 100)
        st.markdown(f'**–í–µ—Ä–¥–∏–∫—Ç:** {verification["verdict"]}')
        st.markdown(f'**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:** {verification["detected_position"]}')
        
    with col4:
        if verification["score"] >= 90:
            st.markdown('<div class="success-card">üéâ –û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ–∑—é–º–µ!</div>', unsafe_allow_html=True)
        elif verification["score"] >= 80:
            st.markdown('<div class="warning-card">üëç –•–æ—Ä–æ—à–µ–µ —Ä–µ–∑—é–º–µ</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="error-card">üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    col5, col6 = st.columns(2)
    
    with col5:
        st.markdown("**‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏—è:**")
        for flag in verification["flags"]:
            st.markdown(f"- {flag}")
    
    with col6:
        st.markdown("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
        for recommendation in verification["recommendations"]:
            st.markdown(f"- {recommendation}")

def show_my_resumes():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ"""
    st.markdown('<div class="sub-header">üìÅ –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö —Ä–µ–∑—é–º–µ</div>', unsafe_allow_html=True)
    
    try:
        resumes = get_user_resumes(st.session_state.user_id)
        
        if not resumes:
            st.info("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ")
            return
        
        for resume in resumes:
            with st.container():
                col1, col2, col3 = st.columns([3, 2, 1])
                
                with col1:
                    st.markdown(f"**{resume[2]}**")  # filename
                    st.markdown(f"*–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {resume[6]}*")  # upload_date
                    if resume[8]:  # detected_position
                        st.markdown(f"**–ü–æ–∑–∏—Ü–∏—è:** {resume[8]}")
                
                with col2:
                    if resume[11]:  # is_analyzed
                        st.markdown("**–°—Ç–∞—Ç—É—Å:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                    else:
                        st.markdown("**–°—Ç–∞—Ç—É—Å:** –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                
                with col3:
                    st.info("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
                st.markdown("---")
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ: {e}")

def show_candidate_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    st.markdown('<div class="sub-header">üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>', unsafe_allow_html=True)
    
    try:
        resumes = get_user_resumes(st.session_state.user_id)
        interviews = auth_system.get_user_interviews(st.session_state.user_id)
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ", len(resumes))
        
        with col2:
            analyzed_resumes = len([r for r in resumes if r[11]])
            st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", analyzed_resumes)
        
        with col3:
            st.metric("–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è", len(interviews))
        
        with col4:
            if interviews:
                avg_score = sum(i[7] for i in interviews) / len(interviews)
                st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{avg_score:.1f}/10")
            else:
                st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", "0/10")
        
        if interviews:
            st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:**")
            for interview in interviews[:3]:
                st.markdown(f"- {interview[3]} ({interview[9][:10]}) - {interview[7]}/10")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def show_main_interface():
    """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞"""
    with st.sidebar:
        st.markdown(f"""
        <div style='text-align: center; padding: 1rem; background: linear-gradient(135deg, #FF6B35, #FF8C42); border-radius: 15px; margin-bottom: 2rem;'>
            <h3 style='color: white; margin: 0;'>üëã –ü—Ä–∏–≤–µ—Ç, {st.session_state.full_name}!</h3>
            <p style='color: white; opacity: 0.9; margin: 0;'>{st.session_state.company if st.session_state.user_type == 'hr' else '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å'}</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üë§ –ü—Ä–æ—Ñ–∏–ª—å", use_container_width=True):
            st.session_state.show_profile = True
            st.rerun()
        
        if st.button("üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", use_container_width=True):
            st.session_state.change_password = True
            st.rerun()
        
        if st.session_state.user_type == "hr":
            st.markdown("---")
            st.markdown("**HR –ù–∞–≤–∏–≥–∞—Ü–∏—è:**")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            sections = [
                ("üë• –ë–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", "candidates"),
                ("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "favorites"), 
                ("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "analytics"),
                ("‚öôÔ∏è –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", "settings"),
                ("üóÉÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ë–î", "database")
            ]
            
            for section_name, section_key in sections:
                is_active = st.session_state.hr_section == section_key
                button_style = "nav-button-active" if is_active else "nav-button-inactive"
                
                if st.button(
                    section_name, 
                    use_container_width=True,
                    key=f"hr_nav_{section_key}",
                    type="primary" if is_active else "secondary"
                ):
                    st.session_state.hr_section = section_key
                    st.rerun()
        
        st.markdown("---")
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if st.session_state.user_type == "candidate":
        show_candidate_interface()
    else:
        show_hr_interface()

def main():
    init_session()
    
    if not st.session_state.logged_in:
        show_login_page()
    else:
        show_main_interface()

if __name__ == "__main__":
    main()